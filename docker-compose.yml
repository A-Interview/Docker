# yml 파일 포맷의 version 설정
version: "3.7"

# 띄울 컨테이너 목록
services:
  # 순서상 database가 먼저 와야 함
  mysql:
    image: mysql:8
    # 환경 설정 부분
    env_file:
      - ./settings/.env
    container_name: ainterview_db
    ports:
      - "3305:3306"
    # 가상 네트워크 연결
    networks:
      - ai_net

  backend:
    # 환경 설정 부분
    env_file:
      - ./settings/.env
    build:
      context: ./backend
      dockerfile: dockerfile
    container_name: backend
    volumes:
      - ./backend:/backend
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    restart: on-failure
    ports:
      - 8000:8000
    # 가상 네트워크 연결
    links:
      - mysql:mysql
    networks:
      - ai_net
    depends_on:
      - mysql
    expose:
      - 8000

  frontend:
    container_name: frontend
    # 환경 설정 부분
    env_file:
      - ./settings/.env
    build:
      # context : 현재 폴더의 frontend 폴더에 있는 도커파일을 쓰겠다.
      context: ./frontend
    command: [ "npm", "start" ]
    # command : 컨테이너가 띄워질 때 실행하는 명령어 / 서버실행
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./frontend/src:/frontend/src # 가상 네트워크 연결
    networks:
      - ai_net
    tty: true
    stdin_open: true
    depends_on:
      - backend

  rabbitmq:
    image: rabbitmq:3.7-management
    container_name: rabbitmq_service
    ports:
      # Expose the port for the worker to add/get tasks
      - 5672:5672
      # OPTIONAL: Expose the GUI port
      - 15672:15672
    expose:
      - 5672
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
    depends_on:
      - backend
    networks:
      - ai_net

  celery:
    container_name: celery_service
    env_file:
      - ./settings/.env
    build:
      context: ./backend
      dockerfile: dockerfile
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    # command: sh -c "celery -A ainterview worker -l info --pool=solo"
    command: sh -c "celery -A ainterview worker -l info"

    networks:
      - ai_net
    depends_on:
      - rabbitmq
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ai_net
    depends_on:
      - backend

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana-storage:/var/lib/grafana
    ports:
      - "3060:3000"
    networks:
      - ai_net
    depends_on:
      - prometheus

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - ai_net

networks:
  ai_net:
    driver: bridge

volumes:
  build_folder: null
  grafana-storage:
